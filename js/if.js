// условия

// Если число больше 0 тогда
//     вернуть число 
// Если число меньше 0 тогда
//     вернуть -число
// Если число = 0 тогда 
//     вернуть 0


// if number > 0 then 
//     return number
// if number < 0 then
//     return -return
// if number = 0 then
//     return 0

// const abs = num => {
//     if (num > 0) {
//         return num;
//     } else if (num < 0) {
//         return -num;
//     } else {
//         return 0;
//     }
// };

// const abs = num => {
//     if (num ===0 || num > 0) {
//         return num;
//     } else {
//         return -num;
//     }
// };

// console.log(abs(0));


// Функцию, которая вычисляет итоговую оценку студента на основе двух параметров: оценки за экзамен и количества законченных проектов.
 
// 1) exam - оценка за экзамен, число от 0 до 100;
// 2) projects - количество проектов, число от 0 и выше.
 
// Функция возвращает итоговую оценку (число).
 
// Есть четыре возможных итоговых оценки:
// 1) 100, если оценка за экзамен выше 90 или есть больше 10 проектов
// 2) 90, если оценка за экзамен выше 75 и есть как минимум 5 проектов
// 3) 75, если оценка за экзамен выше 50 и есть как минимум 2 проекта
// 4) 0 в любом другом случае
 
// пример вызова: finalGrade(100, 12); // 100
// finalGrade(55, 3); // 75

// const finalGrade = (exam, projects) => {
//     if (exam >= 90 && projects >= 10) {
//         return 100;
//     }
//     if (exam >= 75 && projects >= 5) {
//         return 90;
//     }
//     if (exam >= 50 && projects >= 2) {
//         return 75;
//     }
//     return 0;
// };

// console.log(finalGrade(100, 10));
// console.log(finalGrade(55, 3));

// const factorial = (n) => {
//     if (n === 0) {
//         return 1;
//     }
//     // counter - отслеживает движение от n до 1. acc текущий результат умножения от n до 1.
//     const iter = (counter, acc) => {
//       if (counter === 1) {
//         return acc; // в этот момент acc будет равен конечному ответу
//       }  
//       return iter (counter - 1, counter * acc);
//     };
//     return iter(n, 1);
// };
// console.log(factorial(3));

// Задача
// Функцию, используя итеративный процесс. Функция должна находить наименьший делитель заданного числа. Число передаваемоге в функцию, больше 0.
// Делитель должен быть больше 1, за исключением случая, когда аргументом является единица.
// Пример вызова: myFunction(15); // 3
//                myFunction(17); // 17
// Алгоритм:
// 1) попробовать разделить число на 2
// 2) Если делится без остатка, это наименьший делитель
// 3) Если нет, то попробуйте следующий делитель 
// 4) Если ничего не делит число без остатка, то переданное число является простым. Наименьший делить такого числа, оно само.


// const leastDivisor = (n) => {
//     if (n <= 0) {
//         return "Error";
//     }
//     else if (n === 1) {
//         return 1;
//     }
//     else if (n % 2 === 0) {
//         return 2;
//     }
//     const iter = (counter, n, acc) => {
//         if (n % counter === 0) {
//             return counter;
//         }
//         return iter (counter + 1, n)
//     }
//     return iter(3, n)
// }

// console.log(leastDivisor(14))


const abs = num => {
    if (num ===0 || num > 0) {
        return num;
    } else {
        return -num;
    }
};

